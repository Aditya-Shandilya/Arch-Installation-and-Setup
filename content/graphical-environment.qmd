# Building the Graphical Environment

## Introduction

After completing the base installation, you have a functional but text-only system. This chapter documents the transition from the command-line interface to a full graphical environment using AwesomeWM as the window manager.

This phase involves installing display servers, graphics drivers, and configuring the startup process. Each step builds toward a lightweight, customizable desktop experience.

## Understanding the Graphical Stack

Before diving into installation, it's helpful to understand the components:

- **Wayland/Xwayland**: Display protocols that manage how applications draw to the screen
- **Mesa**: Open-source graphics drivers that enable GPU acceleration
- **Window Manager**: Controls window placement, behavior, and appearance (AwesomeWM in this case)
- **Terminal Emulator**: Provides terminal access within the graphical environment

## Core Graphical System Installation

### Installing Display Server and Drivers

```bash
sudo pacman -S wayland wayland-protocols xorg-xwayland xorg-xlsclients mesa lib32-mesa vulkan-intel vulkan-radeon vulkan-mesa-layers
```

**What each package provides:**

- **wayland**: Core Wayland display server protocol
- **wayland-protocols**: Additional protocol extensions for Wayland compositors
- **xorg-xwayland**: Compatibility layer allowing X11 applications to run on Wayland
- **xorg-xlsclients**: Utility to list X11 clients (useful for debugging)
- **mesa**: Open-source graphics drivers for Intel, AMD, and other GPUs
- **lib32-mesa**: 32-bit graphics libraries for compatibility with older applications
- **vulkan-intel/vulkan-radeon/vulkan-mesa-layers**: Modern graphics API support for better performance

**Why these choices:** This combination provides both Wayland (modern) and X11 (compatibility) support, ensuring maximum application compatibility while leveraging modern graphics features.

### Troubleshooting Common Installation Issues

During installation, you may encounter errors. Here are solutions to common problems:

#### Issue 1: Mirror Synchronization Errors

**Symptom:** `404 Not Found` errors when downloading packages from multiple mirrors.

**Cause:** The local package database is out of sync with the remote repositories. This happens when mirrors update their packages but your system still references old file locations.

**Solution - Reinitialize Package Keyring:**

```bash
sudo pacman-key --init
sudo pacman-key --populate archlinux
```

**What this does:** 

- `--init`: Creates a new keyring with fresh entropy
- `--populate archlinux`: Adds Arch Linux's official signing keys

**Why it matters:** Pacman verifies package integrity using GPG signatures. A corrupted or outdated keyring prevents package installation.

**Solution - Update Mirror List:**

```bash
sudo pacman -S reflector
sudo reflector --country Germany --latest 5 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
```

**What this does:**

1. Installs `reflector`, a tool that generates optimal mirror lists
2. Fetches the 5 most recently synchronized German mirrors
3. Filters for HTTPS-only mirrors (security)
4. Sorts by download speed
5. Saves the result to `/etc/pacman.d/mirrorlist`

**Why this works:** Reflector pulls fresh mirror data from Arch's master list, ensuring your system references currently active mirror URLs.

**Adjust for your location:** Replace `Germany` with your country or nearby region for best results.

#### Issue 2: Multilib Repository Error

**Symptom:** `error: target not found: lib32-mesa`

**Cause:** The `multilib` repository is disabled by default. This repository contains 32-bit libraries needed for compatibility with older software.

**Solution - Enable Multilib Repository:**

```bash
sudo vim /etc/pacman.conf
```

**What to do:** Find and uncomment these lines:

```bash
[multilib]
Include = /etc/pacman.d/mirrorlist
```

**Why this repository exists:** Modern 64-bit systems can run 32-bit applications (like some games, Wine, or Steam), but they require 32-bit libraries. The multilib repository provides these.

**Solution - Synchronize Package Database:**

```bash
sudo pacman -Syu
```

**What this does:**

- `-S`: Sync with repositories
- `-y`: Refresh package database
- `-u`: Upgrade all packages

**Why the full sync:** This forces pacman to download the multilib database and update any packages that have newer versions available.

### Completing the Installation

After resolving the synchronization and repository issues, retry the original installation command:

```bash
sudo pacman -S wayland wayland-protocols xorg-xwayland xorg-xlsclients mesa lib32-mesa vulkan-intel vulkan-radeon vulkan-mesa-layers
```

**What should happen now:**

- All packages download successfully from the updated mirrors
- The `lib32-mesa` package is found in the now-enabled multilib repository
- Package integrity verification passes with the refreshed keyring

**Success indicator:** The installation completes without errors, and all packages are installed and configured.

This step confirms that the troubleshooting process worked correctly and your system

## Window Manager and Desktop Applications

### Installing AwesomeWM and Essential Tools

```bash
sudo pacman -S awesome alacritty feh git base-devel network-manager-applet firefox
```

**Package purposes:**

- **awesome**: A highly configurable tiling window manager written in Lua
- **alacritty**: GPU-accelerated terminal emulator (fast and modern)
- **feh**: Lightweight image viewer, also used for setting wallpapers
- **git**: Version control system (essential for dotfiles management)
- **base-devel**: Meta-package containing build tools (gcc, make, etc.) needed for compiling AUR packages
- **network-manager-applet**: System tray applet for managing WiFi and network connections
- **firefox**: The web browser

**Why AwesomeWM:** It's lightweight, extremely customizable via Lua scripts, and uses tiling by default, which maximizes screen space and keyboard-driven workflows.

### Handling Package Conflicts During Installation

During installation, you may be prompted to choose between alternative packages:

**Audio System Choice:**

```
:: There are 2 providers available for jack:
:: Repository extra
   1) jack2  2) pipewire-jack
```

**Recommendation:** Choose `pipewire-jack` (option 2)

**Why:** PipeWire is the modern Linux audio system that handles audio routing, Bluetooth audio, and screen sharing. It's replacing older systems like PulseAudio and JACK2.

**Font Selection:**

```
:: There are 4 providers available for ttf-font:
   1) noto-fonts  2) ttf-dejavu  3) ttf-liberation  4) gnu-free-fonts
```

**Recommendation:** Choose `noto-fonts` (option 1)

**Why:** Noto fonts provide the most comprehensive Unicode coverage, ensuring proper rendering of international characters, symbols, and emojis.

**Toolkit Libraries:**

The installation will also pull in:

- **qt5-base**: Qt toolkit libraries (for Qt-based applications)
- **gtk3** and **gtk4**: GTK toolkit libraries (for GTK-based applications)

**Why both:** Linux applications use either Qt or GTK. Installing both ensures compatibility with most desktop applications.

## Configuring the Session Startup

### Understanding .xinitrc

The `~/.xinitrc` file controls what happens when you run `startx` to launch the graphical environment. It's a shell script that runs before your window manager starts.

### Creating the Startup Configuration

```bash
vim ~/.xinitrc
```

**Remove or comment out default content:**

```bash
# twm &
# xclock -geometry 50x50-1+1 &
# xterm -geometry 80x50+494+51 &
# exec xterm -geometry 80x20+494-0 -name login
```

**Why comment these out:** These are legacy X11 programs from a default xinitrc template. They launch old window managers and terminals that you won't use.

**Add essential utilities:**

```bash
xsetroot -cursor_name left_ptr &
nm-applet &
picom &
exec awesome
```

**What these commands do:**

- `xsetroot -cursor_name left_ptr &`: Sets the default mouse cursor (without this, you'd see an 'X' cursor)
- `nm-applet &`: Launches the network manager system tray icon in the background
- `picom &`: Starts the compositor, enabling window transparency and shadow effects
- `exec awesome`: Starts the Awesome window manager session

**The `&` symbol:** Runs each command in the background, allowing the script to continue to the next line.

::: {.callout-note}
`exec` must be the **last command** in the script, as it replaces the shell process.
:::

## Configuring AwesomeWM

### Copying the Default Configuration

AwesomeWM stores its configuration in a Lua file that controls keybindings, appearance, and behavior.

```bash
mkdir -p ~/.config/awesome
cp /etc/xdg/awesome/rc.lua ~/.config/awesome/
```

**What this does:**

1. Creates the config directory if it doesn't exist
2. Copies the default configuration to your home directory

**Why copy it:** The default config in `/etc/xdg/` is read-only and system-wide. Copying it to `~/.config/` allows personal customization without affecting other users or system updates.

### Critical Configuration Fix

**Open the configuration file:**

```bash
vim ~/.config/awesome/rc.lua
```

**Find this line (usually near the top):**

```lua
terminal = "xterm"
```

**Change it to:**

```lua
terminal = "alacritty"
```

**Why this fix is crucial:** The default configuration assumes `xterm` is installed. Since we installed `alacritty` instead, the default keybinding (`Mod + Enter`) to open a terminal would fail without this change.

**Save and exit:** Press `ESC`, then type `:wq` and press `Enter`.

## Launching the Graphical Environment

### Starting the Session

```bash
startx
```

**What happens:**

1. The X server starts
2. `~/.xinitrc` executes
3. Background utilities launch (cursor, network applet)
4. AwesomeWM takes over the display

**Success indicators:**

- You see the AwesomeWM desktop with a top panel
- The network manager icon appears in the system tray
- Pressing `Mod + Enter` (`Mod` is typically the `Super`/`Windows` key) opens Alacritty

### Basic AwesomeWM Navigation

**Essential keybindings:**

- `Mod + Enter`: Open terminal
- `Mod + R`: Opens a prompt to run any command
- `Mod + S`: Displays the built-in keybinding help popup
- `Mod + Shift + Q`: Exit AwesomeWM
- `Mod + Shift + R`: Restart AwesomeWM (reload configuration)

**Window navigation:**

- `Mod + J/K`: Focus next/previous window
- `Mod + Shift + J/K`: Move window up/down in stack
- `Mod + 1-9`: Switch to workspace (tag) 1-9

**Layout control:**

- `Mod + Space`: Next layout
- `Mod + Shift + Space`: Previous layout

## Common Post-Installation Issues

### Terminal Won't Open

**Problem:** Pressing `Mod + Enter` does nothing.

**Solution:** Verify the terminal setting in `~/.config/awesome/rc.lua` matches your installed terminal emulator.

### No Network Icon

**Problem:** The network manager applet doesn't appear.

**Solution:** Ensure `nm-applet &` is in your `~/.xinitrc` and NetworkManager service is running:

```bash
systemctl status NetworkManager
```

If not active:

```bash
sudo systemctl start NetworkManager
```

### Black Screen After startx

**Problem:** Screen turns black but nothing appears.

**Solution:** Check for errors in the X server log:

```bash
cat ~/.local/share/xorg/Xorg.0.log | grep EE
```

Common causes include missing drivers or configuration errors in `.xinitrc`.

## Key Takeaways

- The graphical stack requires display servers (Wayland/X11), drivers (Mesa), and a window manager
- Package database synchronization is critical for successful installations
- The `multilib` repository enables 32-bit compatibility on 64-bit systems
- `.xinitrc` controls the graphical session startup sequence
- AwesomeWM configuration must reference the correct terminal emulator
- Troubleshooting requires understanding component relationships

## Next Steps

With a working graphical environment, you can now:

1. Customize AwesomeWM appearance and keybindings
2. Install additional applications (web browser, file manager, etc.)
3. Configure dotfiles with Git for reproducible setups
4. Explore themes and status bar customizations

These topics will be covered as you continue refining your desktop environment.
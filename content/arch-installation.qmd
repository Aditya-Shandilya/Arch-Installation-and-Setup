# Manual Arch Linux Installation

## Introduction

This chapter documents a manual Arch Linux installation process. Unlike automated installers, this approach requires understanding each component of the system. The goal is to build knowledge incrementally, creating a foundation for deeper Linux expertise.

The installation follows the Arch philosophy: simplicity, user control, and transparency. By the end, you'll have a minimal, command-line system ready for customization.

## Pre-Installation Checks

Before installing, verify that the live environment is configured correctly.

### Verify Boot Mode

```bash
ls /sys/firmware/efi/efivars
```

**What this does:** Checks if the system booted in UEFI mode. If the directory exists and contains files, you're in UEFI mode. This is important because the bootloader installation later depends on the boot mode.

**Why it matters:** Modern systems use UEFI instead of legacy BIOS. UEFI provides better security features and faster boot times. The presence of `efivars` confirms the firmware interface is accessible.

### Verify Network Connectivity

```bash
ping archlinux.org
```

**What this does:** Sends network packets to verify internet connectivity. Press `Ctrl+C` to stop.

**Why it matters:** The installation requires downloading packages from remote repositories. The live environment typically configures networking automatically via DHCP, but it's essential to verify before proceeding.

### Update System Clock

```bash
timedatectl set-ntp true
```

**What this does:** Enables Network Time Protocol (NTP) synchronization, ensuring the system clock is accurate.

**Why it matters:** Accurate timestamps are crucial for package management, encryption, and system logs. Many security protocols depend on synchronized time.

## Disk Partitioning and Preparation

This section creates the disk structure: an EFI partition for the bootloader, a swap partition for memory overflow, and a Btrfs partition for the root filesystem.

### Understanding the Layout

- **EFI Partition (512MB):** Stores bootloader files. Must be FAT32 format.
- **Swap Partition (2GB):** Acts as overflow when RAM is full. Size typically matches RAM for systems with ≤8GB.
- **Root Partition (Remaining):** Contains the entire Linux system using Btrfs filesystem.

### Partition the Disk

```bash
cfdisk /dev/sda
```

**What this does:** Opens an interactive partition editor. The disk is typically `/dev/sda` in virtual machines.

**Step-by-step:**

1. Select **gpt** when prompted. GPT (GUID Partition Table) is required for UEFI and supports disks larger than 2TB.
2. Create the EFI partition:
   - Select **New** → Enter `512M`
   - Navigate to **Type** → Select **EFI System**
3. Create the swap partition:
   - Select **New** → Enter `2G`
   - Navigate to **Type** → Select **Linux swap**
4. Create the root partition:
   - Select **New** → Press Enter (uses remaining space)
   - Type should default to **Linux filesystem**
5. Select **Write** → Type `yes` → Select **Quit**

**Why these choices:** GPT is modern and required for UEFI. The 512MB EFI partition provides ample space for multiple kernels. The 2GB swap allows basic memory management without wasting disk space.

### Format the Partitions

Formatting creates filesystems on the raw partitions, making them usable by the operating system.

```bash
mkfs.fat -F32 /dev/sda1         # EFI partition
mkswap /dev/sda2                # Swap partition
swapon /dev/sda2                # Activate swap
mkfs.btrfs -L ArchRoot /dev/sda3  # Root partition
```

**What each command does:**

- `mkfs.fat -F32`: Creates a FAT32 filesystem (required for EFI).
- `mkswap`: Prepares the partition for use as swap space.
- `swapon`: Activates swap immediately for the installation process.
- `mkfs.btrfs -L ArchRoot`: Creates a Btrfs filesystem with the label "ArchRoot".

**Why Btrfs:** Btrfs offers advanced features like snapshots, compression, and subvolumes. Subvolumes allow separate management of different directory trees while sharing the same filesystem.

### Create and Mount Btrfs Subvolumes

Subvolumes provide flexibility for snapshots and separate management of system components.

```bash
mount /dev/sda3 /mnt
```

**What this does:** Temporarily mounts the Btrfs partition to create subvolumes.

```bash
btrfs subvolume create /mnt/@
btrfs subvolume create /mnt/home
btrfs subvolume create /mnt/@pkg
```

**What this does:** Creates three subvolumes:

- `@`: The root filesystem (follows Btrfs naming convention)
- `home`: User home directories
- `@pkg`: Package cache at `/var/cache/pacman/pkg`

**Why separate subvolumes:** This allows independent snapshots of the root system without including user data or the package cache. You can restore the system without affecting personal files.

### Remount with Optimizations

```bash
umount /mnt
mount -o compress=zstd,noatime,subvol=@ /dev/sda3 /mnt
```

**What this does:** Unmounts the filesystem, then remounts the root subvolume with specific options.

**Mount options explained:**

- `compress=zstd`: Enables transparent compression using Zstandard algorithm. Saves disk space and can improve performance on modern CPUs.
- `noatime`: Disables recording file access times, reducing write operations and improving performance.
- `subvol=@`: Mounts the root subvolume specifically.

### Mount Remaining Subvolumes and EFI

```bash
mkdir -p /mnt/{boot/efi,home,var/cache/pacman/pkg}
mount -o compress=zstd,noatime,subvol=home /dev/sda3 /mnt/home
mount -o compress=zstd,noatime,subvol=@pkg /dev/sda3 /mnt/var/cache/pacman/pkg
mount /dev/sda1 /mnt/boot/efi
```

**What this does:**

1. Creates necessary directories under `/mnt`
2. Mounts `home` subvolume to `/mnt/home`
3. Mounts `@pkg` subvolume to the pacman cache location
4. Mounts the EFI partition to `/mnt/boot/efi`

**Verification:** Run `lsblk` to view the partition structure and confirm all mounts are correct.

## Installing the Base System

### Configure Package Mirrors

Before installing packages, it's beneficial to optimize the mirror list for faster downloads.

```bash
vim /etc/pacman.d/mirrorlist
```

**What this file contains:** A list of all available Arch Linux repository mirrors worldwide. The package manager (`pacman`) reads this file from top to bottom and uses the first working mirror it encounters.

**Why mirror selection matters:** Geographically closer mirrors typically provide faster download speeds, reducing installation time and improving future system updates.

#### Understanding Mirror Geography

The mirrorlist contains mirrors from various locations globally:

- **Germany (DE)**: `de.arch.niran.jan.co`, `arch.phinau.de`, `berlin.mirror.pkgbuild.com`
- **United States (US)**: `us.arch.mirror.constant.com`, `losangeles.mirror.pkgbuild.com`
- **Singapore**: `singapore.mirror.pkgbuild.com`
- **South Africa**: `johannesburg.mirror.pkgbuild.com`
- **Europe (General)**: `mirror.xtom.ee`, `archlinux.tk-leaf.net`

#### Prioritizing Your Nearest Mirrors

**Steps to reorder mirrors:**

1. In `vim`, navigate using arrow keys to locate mirrors closest to your location
2. Position your cursor on the line of your preferred mirror
3. Press `dd` to cut (delete) the entire line
4. Move to the top of the list (below the comment headers)
5. Press `p` to paste the line
6. Repeat for additional nearby mirrors to create a prioritized list

**Example for Germany:** You would move these mirrors to the top:
```
Server = https://de.arch.niran.jan.co/$repo/os/$arch
Server = https://arch.phinau.de/$repo/os/$arch
Server = https://berlin.mirror.pkgbuild.com/$repo/os/$arch
```

**Vim commands reference:**

Vim operates in different modes. Understanding this is key to using it effectively:

- **Normal mode** (default): For navigation and commands
  - `j`: Move down one line
  - `k`: Move up one line
  - Arrow keys: Also work for navigation (up, down, left, right)
  - `dd`: Cut (delete) the current line
  - `p`: Paste below the cursor
- **Insert mode**: For typing text
  - `i`: Enter insert mode (you'll see `-- INSERT --` at the bottom)
  - In insert mode, `j` and `k` type the letters 'j' and 'k' instead of moving
  - Arrow keys still work for navigation even in insert mode
- **Command mode**: For saving and quitting
  - `ESC`: Return to normal mode from any other mode
  - `:wq`: Write (save) and quit
  - `:q!`: Quit without saving (if you make a mistake)

**Quick tip:** If you're unsure which mode you're in, press `ESC` to return to normal mode.

**Saving and exiting:**

1. Press `ESC` to ensure you're in normal mode
2. Type `:wq` and press `Enter`

This prioritization ensures faster downloads throughout the installation and for future system updates.

### Understanding pacstrap

The `pacstrap` script installs packages to a specified directory, creating the foundation of your Arch system.

```bash
pacstrap /mnt base linux linux-firmware vim
```

**What this installs:**

- `base`: Meta-package containing essential system utilities
- `linux`: The Linux kernel
- `linux-firmware`: Binary firmware files for common hardware
- `vim`: Text editor (you can substitute with `nano` if preferred)

**Why these packages:** The `base` package provides the bare minimum for a bootable system. The kernel is the operating system core. Firmware enables hardware like WiFi cards and graphics adapters. A text editor is essential for configuration.

### Generate fstab

```bash
genfstab -U /mnt >> /mnt/etc/fstab
```

**What this does:** Creates the `/etc/fstab` file, which defines how partitions and subvolumes mount at boot.

**The `-U` flag:** Uses UUIDs (Universally Unique Identifiers) instead of device names. UUIDs remain consistent even if device naming changes, making the system more robust.

## System Configuration

### Enter the New System

```bash
arch-chroot /mnt
```

**What this does:** Changes root into the new installation. This means you're now operating within the newly installed system rather than the live environment.

**Why chroot:** This allows you to configure the system as if you had booted into it. All commands now affect the installed system, not the live USB.

### Set Time Zone

```bash
ln -sf /usr/share/zoneinfo/Region/City /etc/localtime
hwclock --systohc
```

**What this does:**

1. Creates a symbolic link from your timezone file to `/etc/localtime`
2. Generates `/etc/adjtime` based on the current system time

**Example:** For New York: `ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime`

**Why this matters:** The timezone setting affects timestamps in logs, scheduled tasks, and user-facing time displays.

### Configure Localization

Locales define language, character encoding, and regional formatting.

```bash
vim /etc/locale.gen
```

**What to do:** Uncomment your locale(s). Most users will uncomment `en_US.UTF-8 UTF-8`.

**Understanding UTF-8:** UTF-8 is a character encoding that supports international characters. It's the standard for modern Linux systems.

```bash
locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf
```

**What this does:**

1. Generates the locale files you uncommented
2. Sets the system-wide default locale

### Configure Networking

```bash
echo "your-hostname" > /etc/hostname
```

**What this does:** Sets your computer's name on the network. Choose something memorable and unique.

```bash
pacman -S networkmanager
systemctl enable NetworkManager
```

**What this does:**

1. Installs NetworkManager, a program that handles network connections
2. Enables the service to start automatically at boot

**Why NetworkManager:** It provides automatic network configuration, WiFi management, and connection profiles. Essential for laptops and systems with multiple networks.

### Set Root Password

```bash
passwd
```

**What this does:** Sets the password for the root (administrator) account.

**Security note:** Choose a strong password. Root access allows complete system control.

### Create User Account

```bash
useradd -mG wheel -s /bin/bash yourusername
passwd yourusername
```

**What this does:**

1. Creates a new user with:
   - `-m`: Creates a home directory
   - `-G wheel`: Adds user to the `wheel` group (for sudo privileges)
   - `-s /bin/bash`: Sets Bash as the default shell
2. Sets the user's password

**Why not use root:** Running as root constantly is dangerous. A regular user account with sudo provides security while maintaining administrative capabilities.

### Configure sudo

```bash
pacman -S sudo
visudo
```

**What this does:**

1. Installs sudo (allows users to run commands as root)
2. Opens the sudoers configuration file safely

**In visudo:** Uncomment the line: `%wheel ALL=(ALL) ALL`

**What this means:** Any user in the `wheel` group can run any command as any user by prefixing with `sudo`.

## Bootloader Installation

The bootloader is what starts your operating system when the computer powers on.

```bash
pacman -S grub efibootmgr
grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg
```

**What each command does:**

1. Installs GRUB (bootloader) and efibootmgr (manages EFI boot entries)
2. Installs GRUB to the EFI partition:
   - `--target=x86_64-efi`: Specifies UEFI mode for 64-bit systems
   - `--efi-directory=/boot/efi`: Location of the EFI partition
   - `--bootloader-id=GRUB`: Name shown in the firmware boot menu
3. Generates GRUB configuration file (detects kernels and creates boot menu)

### VM Tools (Virtual Machine Only)

```bash
pacman -S open-vm-tools
systemctl enable vmtoolsd.service
```

**What this does:** Installs VMware integration tools for better mouse handling, clipboard sharing, and display resolution.

**Skip this step** if installing on physical hardware.

## Completing Installation

### Exit and Reboot

```bash
exit
umount -R /mnt
reboot
```

**What this does:**

1. Exits the chroot environment
2. Recursively unmounts all filesystems under `/mnt`
3. Reboots the system

**Critical:** Before the system restarts, remove the installation ISO from your VM settings (or physical USB drive). The system should now boot from the hard disk.

## First Boot

After rebooting, you'll see a login prompt. Log in with your username and password.

**You now have:** A minimal, command-line Arch Linux system. No graphical interface yet—just a terminal.

## Next Steps

To create a usable desktop environment, you'll need to install:

1. **Display Server** (`xorg-server`): Manages graphics output
2. **Window Manager** (e.g., `i3`, `dwm`): Controls window placement and behavior
3. **Terminal Emulator** (e.g., `alacritty`): Provides terminal access in the GUI
4. **Display Manager** (e.g., `lightdm`): Provides graphical login

These will be covered in subsequent chapters as you continue building your customized system.

## Key Takeaways

- Manual installation teaches system architecture by requiring interaction with each component
- Btrfs subvolumes enable flexible snapshot management
- Proper partitioning separates bootloader, swap, and system data
- The chroot environment allows system configuration before first boot
- Starting minimal allows you to understand each layer you add

This foundation provides complete control over your Linux system and prepares you for advanced customization.